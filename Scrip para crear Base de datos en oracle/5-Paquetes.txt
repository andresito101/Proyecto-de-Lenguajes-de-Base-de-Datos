-- Paquete 1: pkg_clientes
CREATE OR REPLACE PACKAGE pkg_clientes AS
    PROCEDURE registrar_cliente(p_cliente_id NUMBER, p_nombre VARCHAR2, p_correo VARCHAR2, p_telefono VARCHAR2);
    PROCEDURE actualizar_cliente(p_cliente_id NUMBER, p_nombre VARCHAR2, p_correo VARCHAR2, p_telefono VARCHAR2);
    PROCEDURE eliminar_cliente(p_cliente_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_clientes AS
    PROCEDURE registrar_cliente(p_cliente_id NUMBER, p_nombre VARCHAR2, p_correo VARCHAR2, p_telefono VARCHAR2) IS
    BEGIN
        INSERT INTO Cliente (cliente_id, nombre, correo, telefono, fecha_registro)
        VALUES (p_cliente_id, p_nombre, p_correo, p_telefono, SYSDATE);
        DBMS_OUTPUT.PUT_LINE('Cliente registrado exitosamente.');
    END;

    PROCEDURE actualizar_cliente(p_cliente_id NUMBER, p_nombre VARCHAR2, p_correo VARCHAR2, p_telefono VARCHAR2) IS
    BEGIN
        UPDATE Cliente
        SET nombre = p_nombre, correo = p_correo, telefono = p_telefono
        WHERE cliente_id = p_cliente_id;
        DBMS_OUTPUT.PUT_LINE('Cliente actualizado exitosamente.');
    END;

    PROCEDURE eliminar_cliente(p_cliente_id NUMBER) IS
    BEGIN
        DELETE FROM Cliente WHERE cliente_id = p_cliente_id;
        DBMS_OUTPUT.PUT_LINE('Cliente eliminado exitosamente.');
    END;
END;
/

-- Paquete 2: pkg_hoteles
CREATE OR REPLACE PACKAGE pkg_hoteles AS
    PROCEDURE registrar_hotel(p_hotel_id NUMBER, p_nombre VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2, p_correo VARCHAR2);
    PROCEDURE actualizar_hotel(p_hotel_id NUMBER, p_nombre VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2, p_correo VARCHAR2);
    PROCEDURE eliminar_hotel(p_hotel_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_hoteles AS
    PROCEDURE registrar_hotel(p_hotel_id NUMBER, p_nombre VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2, p_correo VARCHAR2) IS
    BEGIN
        INSERT INTO Hotel (hotel_id, nombre, direccion, telefono, correo)
        VALUES (p_hotel_id, p_nombre, p_direccion, p_telefono, p_correo);
        DBMS_OUTPUT.PUT_LINE('Hotel registrado exitosamente.');
    END;

    PROCEDURE actualizar_hotel(p_hotel_id NUMBER, p_nombre VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2, p_correo VARCHAR2) IS
    BEGIN
        UPDATE Hotel
        SET nombre = p_nombre, direccion = p_direccion, telefono = p_telefono, correo = p_correo
        WHERE hotel_id = p_hotel_id;
        DBMS_OUTPUT.PUT_LINE('Hotel actualizado exitosamente.');
    END;

    PROCEDURE eliminar_hotel(p_hotel_id NUMBER) IS
    BEGIN
        DELETE FROM Hotel WHERE hotel_id = p_hotel_id;
        DBMS_OUTPUT.PUT_LINE('Hotel eliminado exitosamente.');
    END;
END;
/

-- Paquete 3: pkg_reservas
CREATE OR REPLACE PACKAGE pkg_reservas AS
    PROCEDURE registrar_reserva(p_cliente_id NUMBER, p_habitacion_id NUMBER, p_fecha_inicio DATE, p_fecha_fin DATE);
    PROCEDURE cancelar_reserva(p_reservacion_id NUMBER);
    FUNCTION verificar_disponibilidad(p_habitacion_id NUMBER, p_fecha_inicio DATE, p_fecha_fin DATE) RETURN BOOLEAN;
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_reservas AS
    PROCEDURE registrar_reserva(p_cliente_id NUMBER, p_habitacion_id NUMBER, p_fecha_inicio DATE, p_fecha_fin DATE) IS
        disponibilidad BOOLEAN;
    BEGIN
        disponibilidad := verificar_disponibilidad(p_habitacion_id, p_fecha_inicio, p_fecha_fin);
        IF disponibilidad THEN
            INSERT INTO Reservacion (reservacion_id, hotel_id, habitacion_id, cliente_id, fecha_inicio, fecha_fin)
            VALUES (Reservacion_seq.NEXTVAL, 
                    (SELECT hotel_id FROM Habitacion WHERE habitacion_id = p_habitacion_id), 
                    p_habitacion_id, p_cliente_id, p_fecha_inicio, p_fecha_fin);
            DBMS_OUTPUT.PUT_LINE('Reservación registrada exitosamente.');
        ELSE
            RAISE_APPLICATION_ERROR(-20001, 'La habitación no está disponible.');
        END IF;
    END;

    PROCEDURE cancelar_reserva(p_reservacion_id NUMBER) IS
    BEGIN
        DELETE FROM Reservacion WHERE reservacion_id = p_reservacion_id;
        DBMS_OUTPUT.PUT_LINE('Reservación cancelada exitosamente.');
    END;

    FUNCTION verificar_disponibilidad(p_habitacion_id NUMBER, p_fecha_inicio DATE, p_fecha_fin DATE) RETURN BOOLEAN IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_count
        FROM Reservacion
        WHERE habitacion_id = p_habitacion_id
          AND (p_fecha_inicio <= fecha_fin AND p_fecha_fin >= fecha_inicio);

        RETURN v_count = 0; -- TRUE si no hay conflictos
    END;
END;
/

-- Paquete 4: pkg_habitaciones
CREATE OR REPLACE PACKAGE pkg_habitaciones AS
    PROCEDURE registrar_habitacion(p_habitacion_id NUMBER, p_hotel_id NUMBER, p_numero VARCHAR2, p_tipo VARCHAR2, p_precio NUMBER);
    PROCEDURE actualizar_habitacion(p_habitacion_id NUMBER, p_tipo VARCHAR2, p_precio NUMBER);
    PROCEDURE eliminar_habitacion(p_habitacion_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_habitaciones AS
    PROCEDURE registrar_habitacion(p_habitacion_id NUMBER, p_hotel_id NUMBER, p_numero VARCHAR2, p_tipo VARCHAR2, p_precio NUMBER) IS
    BEGIN
        INSERT INTO Habitacion (habitacion_id, hotel_id, numero, tipo, precio_por_noche, estado)
        VALUES (p_habitacion_id, p_hotel_id, p_numero, p_tipo, p_precio, 'Disponible');
        DBMS_OUTPUT.PUT_LINE('Habitación registrada exitosamente.');
    END;

    PROCEDURE actualizar_habitacion(p_habitacion_id NUMBER, p_tipo VARCHAR2, p_precio NUMBER) IS
    BEGIN
        UPDATE Habitacion
        SET tipo = p_tipo, precio_por_noche = p_precio
        WHERE habitacion_id = p_habitacion_id;
        DBMS_OUTPUT.PUT_LINE('Habitación actualizada exitosamente.');
    END;

    PROCEDURE eliminar_habitacion(p_habitacion_id NUMBER) IS
    BEGIN
        DELETE FROM Habitacion WHERE habitacion_id = p_habitacion_id;
        DBMS_OUTPUT.PUT_LINE('Habitación eliminada exitosamente.');
    END;
END;
/

-- Paquete 5: pkg_facturacion
CREATE OR REPLACE PACKAGE pkg_facturacion AS
    PROCEDURE generar_factura(p_reservacion_id NUMBER, p_cliente_id NUMBER);
    FUNCTION calcular_total(p_habitacion_id NUMBER, p_duracion NUMBER) RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_facturacion AS
    PROCEDURE generar_factura(p_reservacion_id NUMBER, p_cliente_id NUMBER) IS
        total_pago NUMBER;
        v_hotel_id NUMBER;
        v_habitacion_id NUMBER;
        v_duracion NUMBER;
    BEGIN
        -- Obtener detalles de la reservación
        SELECT hotel_id, habitacion_id, fecha_fin - fecha_inicio
        INTO v_hotel_id, v_habitacion_id, v_duracion
        FROM Reservacion
        WHERE reservacion_id = p_reservacion_id;

        -- Calcular el total
        total_pago := calcular_total(v_habitacion_id, v_duracion);

        -- Insertar la factura
        INSERT INTO Facturacion (factura_id, cliente_id, hotel_id, monto_total, fecha_emision)
        VALUES (Facturacion_seq.NEXTVAL, p_cliente_id, v_hotel_id, total_pago, SYSDATE);

        DBMS_OUTPUT.PUT_LINE('Factura generada exitosamente.');
    END;

    FUNCTION calcular_total(p_habitacion_id NUMBER, p_duracion NUMBER) RETURN NUMBER IS
        v_precio NUMBER;
    BEGIN
        -- Obtener el precio por noche de la habitación
        SELECT precio_por_noche
        INTO v_precio
        FROM Habitacion
        WHERE habitacion_id = p_habitacion_id;

        -- Calcular el total
        RETURN v_precio * p_duracion;
    END;
END;
/


-- Paquete 6: pkg_opiniones
CREATE OR REPLACE PACKAGE pkg_opiniones AS
    PROCEDURE registrar_opinion(p_cliente_id NUMBER, p_hotel_id NUMBER, p_comentario VARCHAR2, p_calificacion NUMBER);
    PROCEDURE actualizar_opinion(p_opinion_id NUMBER, p_comentario VARCHAR2, p_calificacion NUMBER);
    PROCEDURE eliminar_opinion(p_opinion_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_opiniones AS
    PROCEDURE registrar_opinion(p_cliente_id NUMBER, p_hotel_id NUMBER, p_comentario VARCHAR2, p_calificacion NUMBER) IS
    BEGIN
        INSERT INTO Opiniones (opinion_id, cliente_id, hotel_id, comentario, calificacion)
        VALUES (Opiniones_seq.NEXTVAL, p_cliente_id, p_hotel_id, p_comentario, p_calificacion);
        DBMS_OUTPUT.PUT_LINE('Opinión registrada exitosamente.');
    END;

    PROCEDURE actualizar_opinion(p_opinion_id NUMBER, p_comentario VARCHAR2, p_calificacion NUMBER) IS
    BEGIN
        UPDATE Opiniones
        SET comentario = p_comentario, calificacion = p_calificacion
        WHERE opinion_id = p_opinion_id;
        DBMS_OUTPUT.PUT_LINE('Opinión actualizada exitosamente.');
    END;

    PROCEDURE eliminar_opinion(p_opinion_id NUMBER) IS
    BEGIN
        DELETE FROM Opiniones WHERE opinion_id = p_opinion_id;
        DBMS_OUTPUT.PUT_LINE('Opinión eliminada exitosamente.');
    END;
END;
/

-- Paquete 7: pkg_empleados
CREATE OR REPLACE PACKAGE pkg_empleados AS
    PROCEDURE registrar_empleado(p_empleado_id NUMBER, p_hotel_id NUMBER, p_nombre VARCHAR2, p_puesto VARCHAR2, p_fecha_contratacion DATE, p_salario NUMBER);
    PROCEDURE actualizar_empleado(p_empleado_id NUMBER, p_puesto VARCHAR2, p_salario NUMBER);
    PROCEDURE eliminar_empleado(p_empleado_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_empleados AS
    PROCEDURE registrar_empleado(p_empleado_id NUMBER, p_hotel_id NUMBER, p_nombre VARCHAR2, p_puesto VARCHAR2, p_fecha_contratacion DATE, p_salario NUMBER) IS
    BEGIN
        INSERT INTO Empleados (empleado_id, hotel_id, nombre, puesto, fecha_contratacion, salario)
        VALUES (p_empleado_id, p_hotel_id, p_nombre, p_puesto, p_fecha_contratacion, p_salario);
        DBMS_OUTPUT.PUT_LINE('Empleado registrado exitosamente.');
    END;

    PROCEDURE actualizar_empleado(p_empleado_id NUMBER, p_puesto VARCHAR2, p_salario NUMBER) IS
    BEGIN
        UPDATE Empleados
        SET puesto = p_puesto, salario = p_salario
        WHERE empleado_id = p_empleado_id;
        DBMS_OUTPUT.PUT_LINE('Empleado actualizado exitosamente.');
    END;

    PROCEDURE eliminar_empleado(p_empleado_id NUMBER) IS
    BEGIN
        DELETE FROM Empleados WHERE empleado_id = p_empleado_id;
        DBMS_OUTPUT.PUT_LINE('Empleado eliminado exitosamente.');
    END;
END;
/

-- Paquete 8: pkg_eventos
CREATE OR REPLACE PACKAGE pkg_eventos AS
    PROCEDURE registrar_evento(p_evento_id NUMBER, p_hotel_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2, p_fecha_inicio DATE, p_fecha_fin DATE, p_capacidad NUMBER);
    PROCEDURE actualizar_evento(p_evento_id NUMBER, p_nombre VARCHAR2, p_fecha_inicio DATE, p_fecha_fin DATE, p_capacidad NUMBER);
    PROCEDURE eliminar_evento(p_evento_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_eventos AS
    PROCEDURE registrar_evento(p_evento_id NUMBER, p_hotel_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2, p_fecha_inicio DATE, p_fecha_fin DATE, p_capacidad NUMBER) IS
    BEGIN
        INSERT INTO Eventos (evento_id, hotel_id, nombre, descripcion, fecha_inicio, fecha_fin, capacidad)
        VALUES (p_evento_id, p_hotel_id, p_nombre, p_descripcion, p_fecha_inicio, p_fecha_fin, p_capacidad);
        DBMS_OUTPUT.PUT_LINE('Evento registrado exitosamente.');
    END;

    PROCEDURE actualizar_evento(p_evento_id NUMBER, p_nombre VARCHAR2, p_fecha_inicio DATE, p_fecha_fin DATE, p_capacidad NUMBER) IS
    BEGIN
        UPDATE Eventos
        SET nombre = p_nombre, fecha_inicio = p_fecha_inicio, fecha_fin = p_fecha_fin, capacidad = p_capacidad
        WHERE evento_id = p_evento_id;
        DBMS_OUTPUT.PUT_LINE('Evento actualizado exitosamente.');
    END;

    PROCEDURE eliminar_evento(p_evento_id NUMBER) IS
    BEGIN
        DELETE FROM Eventos WHERE evento_id = p_evento_id;
        DBMS_OUTPUT.PUT_LINE('Evento eliminado exitosamente.');
    END;
END;
/

-- Paquete 9: pkg_amenidades
CREATE OR REPLACE PACKAGE pkg_amenidades AS
    PROCEDURE registrar_amenidad(p_amenidad_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2);
    PROCEDURE actualizar_amenidad(p_amenidad_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2);
    PROCEDURE eliminar_amenidad(p_amenidad_id NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_amenidades AS
    PROCEDURE registrar_amenidad(p_amenidad_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2) IS
    BEGIN
        INSERT INTO Amenidades (amenidad_id, nombre, descripcion)
        VALUES (p_amenidad_id, p_nombre, p_descripcion);
        DBMS_OUTPUT.PUT_LINE('Amenidad registrada exitosamente.');
    END;

    PROCEDURE actualizar_amenidad(p_amenidad_id NUMBER, p_nombre VARCHAR2, p_descripcion VARCHAR2) IS
    BEGIN
        UPDATE Amenidades
        SET nombre = p_nombre, descripcion = p_descripcion
        WHERE amenidad_id = p_amenidad_id;
        DBMS_OUTPUT.PUT_LINE('Amenidad actualizada exitosamente.');
    END;

    PROCEDURE eliminar_amenidad(p_amenidad_id NUMBER) IS
    BEGIN
        DELETE FROM Amenidades WHERE amenidad_id = p_amenidad_id;
        DBMS_OUTPUT.PUT_LINE('Amenidad eliminada exitosamente.');
    END;
END;
/

-- Paquete 10: pkg_logs
CREATE OR REPLACE PACKAGE pkg_logs AS
    PROCEDURE registrar_log(p_operacion VARCHAR2, p_detalle VARCHAR2);
END;
/

CREATE OR REPLACE PACKAGE BODY pkg_logs AS
    PROCEDURE registrar_log(p_operacion VARCHAR2, p_detalle VARCHAR2) IS
    BEGIN
        INSERT INTO Logs (log_id, operacion, detalle, fecha)
        VALUES (Logs_seq.NEXTVAL, p_operacion, p_detalle, SYSDATE);
        DBMS_OUTPUT.PUT_LINE('Log registrado: ' || p_operacion || ' - ' || p_detalle);
    END;
END;
/
