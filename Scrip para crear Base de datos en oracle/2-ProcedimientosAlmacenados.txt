-- 1. Registrar un nuevo cliente
CREATE OR REPLACE PROCEDURE registrar_cliente(
    p_cliente_id NUMBER, -- ID manual del cliente
    p_nombre VARCHAR2,   -- Nombre del cliente
    p_correo VARCHAR2,   -- Correo único del cliente
    p_telefono VARCHAR2  -- Teléfono del cliente
) IS
BEGIN
    -- Validar si el ID ya existe
    IF cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El ID proporcionado ya existe.');
    END IF;

    -- Validar si el correo ya está registrado
    IF NOT correo_es_unico(p_correo) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El correo proporcionado ya está registrado.');
    END IF;

    -- Insertar el nuevo cliente
    INSERT INTO Cliente (cliente_id, nombre, correo, telefono, fecha_registro)
    VALUES (p_cliente_id, p_nombre, p_correo, p_telefono, SYSDATE);

    DBMS_OUTPUT.PUT_LINE('Cliente registrado exitosamente.');
END;
/


-- 2. Crear un nuevo hotel
CREATE OR REPLACE PROCEDURE registrar_hotel(
    p_hotel_id NUMBER,   -- ID manual del hotel
    p_nombre VARCHAR2,   -- Nombre único del hotel
    p_direccion VARCHAR2, -- Dirección del hotel
    p_telefono VARCHAR2, -- Teléfono del hotel
    p_correo VARCHAR2    -- Correo único del hotel
) IS
BEGIN
    -- Validar si el ID ya existe
    IF hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El ID proporcionado ya existe.');
    END IF;

    -- Validar si el nombre ya está registrado
    IF NOT nombre_hotel_es_unico(p_nombre) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El nombre del hotel ya está registrado.');
    END IF;

    -- Validar si el correo ya está registrado
    IF NOT correo_hotel_es_unico(p_correo) THEN
        RAISE_APPLICATION_ERROR(-20003, 'El correo proporcionado ya está registrado.');
    END IF;

    -- Insertar el nuevo hotel
    INSERT INTO Hotel (hotel_id, nombre, direccion, telefono, correo)
    VALUES (p_hotel_id, p_nombre, p_direccion, p_telefono, p_correo);

    DBMS_OUTPUT.PUT_LINE('Hotel registrado exitosamente.');
END;
/


-- 3. Agregar una nueva habitación
CREATE OR REPLACE PROCEDURE agregar_habitacion(
    p_habitacion_id NUMBER,     -- ID único de la habitación
    p_hotel_id NUMBER,          -- ID del hotel al que pertenece
    p_numero VARCHAR2,          -- Número único de la habitación dentro del hotel
    p_tipo VARCHAR2,            -- Tipo de habitación (Ej: Individual, Doble, Suite)
    p_precio_por_noche NUMBER   -- Precio por noche de la habitación
) IS
BEGIN
    -- Validar si el ID de la habitación ya existe
    IF habitacion_existe(p_habitacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El ID de la habitación ya existe.');
    END IF;

    -- Validar si el número de habitación ya está registrado en el mismo hotel
    IF NOT numero_habitacion_es_unico(p_hotel_id, p_numero) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El número de habitación ya está registrado en este hotel.');
    END IF;

    -- Insertar la nueva habitación
    INSERT INTO Habitacion (habitacion_id, hotel_id, numero, tipo, precio_por_noche, estado)
    VALUES (p_habitacion_id, p_hotel_id, p_numero, p_tipo, p_precio_por_noche, 'Disponible');

    DBMS_OUTPUT.PUT_LINE('Habitación registrada exitosamente.');
END;
/


CREATE SEQUENCE Reservacion_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria (más seguro para datos pequeños)
/


-- 4. Registrar una nueva reserva
CREATE OR REPLACE PROCEDURE registrar_reserva(
    p_cliente_id NUMBER,
    p_habitacion_id NUMBER,
    p_fecha_inicio DATE,
    p_fecha_fin DATE
) IS
    disponibilidad VARCHAR2(20);
    v_hotel_id NUMBER;
BEGIN
    -- Validar la existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Validar la existencia de la habitación
    SELECT hotel_id INTO v_hotel_id
    FROM Habitacion
    WHERE habitacion_id = p_habitacion_id;

    -- Validar disponibilidad de la habitación
    disponibilidad := habitacion_disponible(p_habitacion_id, p_fecha_inicio, p_fecha_fin);
    IF disponibilidad != 'Disponible' THEN
        RAISE_APPLICATION_ERROR(-20002, 'La habitación no está disponible en las fechas seleccionadas.');
    END IF;

    -- Insertar la nueva reservación
    INSERT INTO Reservacion (reservacion_id, hotel_id, habitacion_id, cliente_id, fecha_inicio, fecha_fin)
    VALUES (Reservacion_seq.NEXTVAL, v_hotel_id, p_habitacion_id, p_cliente_id, p_fecha_inicio, p_fecha_fin);

    DBMS_OUTPUT.PUT_LINE('Reservación registrada exitosamente.');
END;
/


-- 5. Cancelar una reserva
CREATE OR REPLACE PROCEDURE cancelar_reserva(p_reservacion_id NUMBER) IS
    v_habitacion_id NUMBER;
BEGIN
    -- Validar existencia de la reservación
    IF NOT reservacion_existe(p_reservacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La reservación no existe.');
    END IF;

    -- Obtener el ID de la habitación asociada a la reservación
    SELECT habitacion_id INTO v_habitacion_id
    FROM Reservacion
    WHERE reservacion_id = p_reservacion_id;

    -- Eliminar la reservación
    DELETE FROM Reservacion WHERE reservacion_id = p_reservacion_id;

    -- Actualizar el estado de la habitación a 'Disponible'
    UPDATE Habitacion
    SET estado = 'Disponible'
    WHERE habitacion_id = v_habitacion_id;

    DBMS_OUTPUT.PUT_LINE('Reservación cancelada exitosamente.');
END;
/



-- 6. Registrar un check-in
CREATE SEQUENCE Check_In_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria
/


CREATE OR REPLACE PROCEDURE registrar_check_in(
    p_reservacion_id NUMBER
) IS
    v_habitacion_id NUMBER;
BEGIN
    -- Validar existencia de la reservación
    IF NOT reservacion_existe(p_reservacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La reservación no existe.');
    END IF;

    -- Obtener el ID de la habitación asociada a la reservación
    SELECT habitacion_id
    INTO v_habitacion_id
    FROM Reservacion
    WHERE reservacion_id = p_reservacion_id;

    -- Validar que la habitación está disponible para Check-In
    IF NOT habitacion_esta_disponible(v_habitacion_id, SYSDATE, SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-20002, 'La habitación no está disponible para Check-In.');
    END IF;

    -- Registrar el Check-In
    INSERT INTO Check_In (check_in_id, reservacion_id, fecha)
    VALUES (Check_In_seq.NEXTVAL, p_reservacion_id, SYSDATE);

    -- Actualizar el estado de la habitación a "Ocupado"
    UPDATE Habitacion
    SET estado = 'Ocupado'
    WHERE habitacion_id = v_habitacion_id;

    DBMS_OUTPUT.PUT_LINE('Check-In registrado exitosamente.');
END;
/


-- 7. Registrar un check-out
CREATE SEQUENCE Check_Out_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria
/


CREATE OR REPLACE PROCEDURE registrar_check_out(
    p_reservacion_id NUMBER
) IS
    v_habitacion_id NUMBER;
BEGIN
    -- Validar existencia de la reservación
    IF NOT reservacion_existe(p_reservacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La reservación no existe.');
    END IF;

    -- Obtener el ID de la habitación asociada a la reservación
    SELECT habitacion_id
    INTO v_habitacion_id
    FROM Reservacion
    WHERE reservacion_id = p_reservacion_id;

    -- Registrar el Check-Out
    INSERT INTO Check_Out (check_out_id, reservacion_id, fecha)
    VALUES (Check_Out_seq.NEXTVAL, p_reservacion_id, SYSDATE);

    -- Actualizar el estado de la habitación a "Disponible"
    UPDATE Habitacion
    SET estado = 'Disponible'
    WHERE habitacion_id = v_habitacion_id;

    DBMS_OUTPUT.PUT_LINE('Check-Out registrado exitosamente.');
END;
/



-- 8. Generar una factura
CREATE SEQUENCE Facturacion_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria
/


CREATE OR REPLACE PROCEDURE generar_factura(
    p_reservacion_id NUMBER,
    p_cliente_id NUMBER
) IS
    total_pago NUMBER;
    v_hotel_id NUMBER;
    v_habitacion_id NUMBER;
    v_fecha_inicio DATE;
    v_fecha_fin DATE;
BEGIN
    -- Validar existencia de la reservación
    IF NOT reservacion_existe(p_reservacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La reservación no existe.');
    END IF;

    -- Validar existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El cliente no existe.');
    END IF;

    -- Obtener detalles de la reservación
    SELECT hotel_id, habitacion_id, fecha_inicio, fecha_fin
    INTO v_hotel_id, v_habitacion_id, v_fecha_inicio, v_fecha_fin
    FROM Reservacion
    WHERE reservacion_id = p_reservacion_id;

    -- Calcular el total a pagar
    total_pago := total_a_pagar(v_habitacion_id, calcular_duracion_reserva(v_fecha_inicio, v_fecha_fin));

    -- Insertar la factura en la tabla Facturacion
    INSERT INTO Facturacion (factura_id, cliente_id, hotel_id, monto_total, fecha_emision)
    VALUES (Facturacion_seq.NEXTVAL, p_cliente_id, v_hotel_id, total_pago, SYSDATE);

    DBMS_OUTPUT.PUT_LINE('Factura generada exitosamente con un total de: ' || total_pago);
END;
/


-- 9. Registrar una opinión
CREATE SEQUENCE Opiniones_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria
/

CREATE OR REPLACE PROCEDURE registrar_opinion(
    p_cliente_id NUMBER,
    p_hotel_id NUMBER,
    p_comentario VARCHAR2,
    p_calificacion NUMBER
) IS
BEGIN
    -- Validar la existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Validar la existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El hotel no existe.');
    END IF;

    -- Validar que la calificación esté en el rango permitido
    IF p_calificacion NOT BETWEEN 1 AND 5 THEN
        RAISE_APPLICATION_ERROR(-20003, 'La calificación debe estar entre 1 y 5.');
    END IF;

    -- Insertar la opinión
    INSERT INTO Opiniones (opinion_id, cliente_id, hotel_id, comentario, calificacion)
    VALUES (Opiniones_seq.NEXTVAL, p_cliente_id, p_hotel_id, p_comentario, p_calificacion);

    DBMS_OUTPUT.PUT_LINE('Opinión registrada exitosamente.');
END;
/


-- 11. Consultar el ingreso total de un hotel
CREATE OR REPLACE PROCEDURE consultar_ingreso_hotel(
    p_hotel_id NUMBER,
    o_ingreso OUT NUMBER
) IS
BEGIN
    -- Validar la existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El hotel no existe.');
    END IF;

    -- Calcular el ingreso total
    SELECT NVL(SUM(monto_total), 0)
    INTO o_ingreso
    FROM Facturacion
    WHERE hotel_id = p_hotel_id;

    DBMS_OUTPUT.PUT_LINE('Ingreso total del hotel: ' || o_ingreso);
END;
/

-- 12. Actualizar precio de una habitación
CREATE OR REPLACE PROCEDURE actualizar_precio_habitacion(
    p_habitacion_id NUMBER,
    p_nuevo_precio NUMBER
) IS
BEGIN
    -- Validar la existencia de la habitación
    IF NOT habitacion_existe(p_habitacion_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La habitación no existe.');
    END IF;

    -- Validar que el nuevo precio sea mayor a 0
    IF p_nuevo_precio <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El precio debe ser mayor a 0.');
    END IF;

    -- Actualizar el precio
    UPDATE Habitacion
    SET precio_por_noche = p_nuevo_precio
    WHERE habitacion_id = p_habitacion_id;

    DBMS_OUTPUT.PUT_LINE('Precio actualizado exitosamente.');
END;
/


-- 13. Registrar una nueva amenidad
CREATE OR REPLACE PROCEDURE registrar_amenidad(
    p_amenidad_id NUMBER, -- ID manual de la amenidad
    p_nombre VARCHAR2,
    p_descripcion VARCHAR2
) IS
BEGIN
    -- Validar si el nombre ya existe
    IF NOT amenidad_es_unica(p_nombre) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El nombre de la amenidad ya está registrado.');
    END IF;

    -- Insertar la nueva amenidad
    INSERT INTO Amenidades (amenidad_id, nombre, descripcion)
    VALUES (p_amenidad_id, p_nombre, p_descripcion);

    DBMS_OUTPUT.PUT_LINE('Amenidad registrada exitosamente.');
END;
/

-- 14. Asignar amenidad a un cliente
CREATE SEQUENCE Reservas_Amenidades_seq
START WITH 1 -- Primer valor que generará la secuencia
INCREMENT BY 1 -- Incremento para cada siguiente valor
NOCACHE; -- Opcional, evita almacenamiento en memoria
/

CREATE OR REPLACE PROCEDURE reservar_amenidad(
    p_cliente_id NUMBER,
    p_amenidad_id NUMBER,
    p_fecha DATE
) IS
BEGIN
    -- Validar la existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Validar la existencia de la amenidad
    IF NOT amenidad_existe(p_amenidad_id) THEN
        RAISE_APPLICATION_ERROR(-20002, 'La amenidad no existe.');
    END IF;

    -- Validar que la reserva sea única
    IF NOT reserva_amenidad_es_unica(p_cliente_id, p_amenidad_id, p_fecha) THEN
        RAISE_APPLICATION_ERROR(-20003, 'El cliente ya tiene esta amenidad reservada en la fecha especificada.');
    END IF;

    -- Insertar la reserva de amenidad
    INSERT INTO Reservas_Amenidades (reserva_amenidad_id, cliente_id, amenidad_id, fecha)
    VALUES (Reservas_Amenidades_seq.NEXTVAL, p_cliente_id, p_amenidad_id, p_fecha);

    DBMS_OUTPUT.PUT_LINE('Amenidad reservada exitosamente.');
END;
/



-- 15. Listar clientes de un hotel
CREATE OR REPLACE PROCEDURE listar_clientes_hotel(
    p_hotel_id NUMBER,       -- ID del hotel
    o_cursor OUT SYS_REFCURSOR -- Cursor para los resultados
) IS
BEGIN
    -- Validar existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El hotel no existe.');
    END IF;

    -- Abrir el cursor para listar clientes del hotel
    OPEN o_cursor FOR
    SELECT DISTINCT c.nombre, c.correo, c.telefono
    FROM Cliente c
    JOIN Reservacion r ON c.cliente_id = r.cliente_id
    WHERE r.hotel_id = p_hotel_id;

    DBMS_OUTPUT.PUT_LINE('Cursor abierto para clientes del hotel con ID: ' || p_hotel_id);
END;
/


---16 Actualizar Información de un Cliente
CREATE OR REPLACE PROCEDURE actualizar_cliente(
    p_cliente_id NUMBER,
    p_nombre VARCHAR2,
    p_correo VARCHAR2,
    p_telefono VARCHAR2
) IS
BEGIN
    -- Validar existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Validar que el correo sea único
    IF NOT correo_es_unico(p_correo, p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20002, 'El correo proporcionado ya está en uso.');
    END IF;

    -- Actualizar los datos del cliente
    UPDATE Cliente
    SET nombre = p_nombre, correo = p_correo, telefono = p_telefono
    WHERE cliente_id = p_cliente_id;

    DBMS_OUTPUT.PUT_LINE('Información del cliente actualizada exitosamente.');
END;
/


--17 Eliminar cliente
CREATE OR REPLACE PROCEDURE eliminar_cliente(
    p_cliente_id NUMBER
) IS
BEGIN
    -- Validar existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Eliminar registros relacionados y al cliente
    DELETE FROM Reservas_Amenidades WHERE cliente_id = p_cliente_id;
    DELETE FROM Reservacion WHERE cliente_id = p_cliente_id;
    DELETE FROM Cliente WHERE cliente_id = p_cliente_id;

    DBMS_OUTPUT.PUT_LINE('Cliente y registros asociados eliminados exitosamente.');
END;
/

--18 Eliminar Hotel
CREATE OR REPLACE PROCEDURE eliminar_hotel(
    p_hotel_id NUMBER
) IS
BEGIN
    -- Validar existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El hotel no existe.');
    END IF;

    -- Eliminar registros relacionados y el hotel
    DELETE FROM Facturacion WHERE hotel_id = p_hotel_id;
    DELETE FROM Reservacion WHERE hotel_id = p_hotel_id;
    DELETE FROM Habitacion WHERE hotel_id = p_hotel_id;
    DELETE FROM Hotel WHERE hotel_id = p_hotel_id;

    DBMS_OUTPUT.PUT_LINE('Hotel y registros asociados eliminados exitosamente.');
END;
/

--19 Actualizar info hotel
CREATE OR REPLACE PROCEDURE actualizar_hotel(
    p_hotel_id NUMBER,
    p_nombre VARCHAR2,
    p_direccion VARCHAR2,
    p_telefono VARCHAR2,
    p_correo VARCHAR2
) IS
BEGIN
    -- Validar existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El hotel no existe.');
    END IF;

    -- Actualizar información del hotel
    UPDATE Hotel
    SET nombre = p_nombre, direccion = p_direccion, telefono = p_telefono, correo = p_correo
    WHERE hotel_id = p_hotel_id;

    DBMS_OUTPUT.PUT_LINE('Información del hotel actualizada exitosamente.');
END;
/

--20 Registrar Empleado
CREATE OR REPLACE PROCEDURE registrar_empleado(
    p_empleado_id NUMBER,       -- ID único del empleado, ingresado manualmente
    p_hotel_id NUMBER,          -- ID del hotel al que pertenece el empleado
    p_nombre VARCHAR2,          -- Nombre del empleado
    p_puesto VARCHAR2,          -- Puesto del empleado
    p_fecha_contratacion DATE,  -- Fecha de contratación
    p_salario NUMBER            -- Salario del empleado
) IS
BEGIN
    -- Validar existencia del hotel
    IF NOT hotel_existe(p_hotel_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El hotel no existe.');
    END IF;

    -- Insertar el nuevo empleado
    INSERT INTO Empleados (empleado_id, hotel_id, nombre, puesto, fecha_contratacion, salario)
    VALUES (p_empleado_id, p_hotel_id, p_nombre, p_puesto, p_fecha_contratacion, p_salario);

    DBMS_OUTPUT.PUT_LINE('Empleado registrado exitosamente.');
END;
/


--21 Cancelar reservas de cliente todas
CREATE OR REPLACE PROCEDURE cancelar_reservas_cliente(
    p_cliente_id NUMBER
) IS
BEGIN
    -- Validar existencia del cliente
    IF NOT cliente_existe(p_cliente_id) THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente no existe.');
    END IF;

    -- Cancelar todas las reservas del cliente
    DELETE FROM Reservacion WHERE cliente_id = p_cliente_id;
    DBMS_OUTPUT.PUT_LINE('Todas las reservas del cliente han sido canceladas.');
END;
/

